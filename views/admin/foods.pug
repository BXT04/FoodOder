extends ../layout

block content
  .admin-header
    .container
      h1
        i.fas.fa-utensils
        |  Quản lý món ăn
      p Thêm, sửa, xóa các món ăn trong menu
  
  .container
    // Admin Navigation
    .admin-nav
      ul
        li
          a(href="/admin")
            i.fas.fa-tachometer-alt
            |  Dashboard
        li
          a.active(href="/admin/foods")
            i.fas.fa-utensils
            |  Quản lý món ăn
        li
          a(href="/admin/orders")
            i.fas.fa-shopping-cart
            |  Quản lý đơn hàng
        li
          a(href="/admin/users")
            i.fas.fa-users
            |  Quản lý người dùng
    
    // Add Food Button
    .add-food-section
      button.btn.btn-primary(data-toggle="modal", data-target="#addFoodModal")
        i.fas.fa-plus
        |  Thêm món ăn mới
    
    // Foods Table
    .card
      .card-header
        h3
          i.fas.fa-list
          |  Danh sách món ăn
      .card-body
        if foods.length > 0
          .table-container
            table.table
              thead
                tr
                  th ID
                  th Hình ảnh
                  th Tên món
                  th Danh mục
                  th Giá
                  th Thao tác
              tbody
                each food in foods
                  tr
                    td= food.id
                    td
                      .food-thumbnail
                        i.fas.fa-utensils
                    td= food.name
                    td= food.category
                    td= food.price.toLocaleString('vi-VN') + ' VNĐ'
                    td
                      .action-buttons
                        button.btn.btn-sm.btn-primary.edit-food(
                          data-food-id=food.id,
                          data-food-name=food.name,
                          data-food-category=food.category,
                          data-food-price=food.price
                        )
                          i.fas.fa-edit
                        button.btn.btn-sm.btn-danger.delete-food(
                          data-food-id=food.id,
                          data-food-name=food.name
                        )
                          i.fas.fa-trash
        else
          .empty-state
            i.fas.fa-utensils
            p Chưa có món ăn nào

    // Add Food Modal
    .modal#addFoodModal
      .modal-content
        .modal-header
          h3
            i.fas.fa-plus
            |  Thêm món ăn mới
          button.modal-close &times;
        .modal-body
          form#addFoodForm
            .form-group
              label.form-label(for="foodName") Tên món ăn
              input.form-control#foodName(type="text", required, placeholder="Nhập tên món ăn")
            
            .form-group
              label.form-label(for="foodCategory") Danh mục
              select.form-control#foodCategory(required)
                option(value="") Chọn danh mục
                option(value="Món chính") Món chính
                option(value="Đồ ăn nhanh") Đồ ăn nhanh
                option(value="Tráng miệng") Tráng miệng
                option(value="Đồ uống") Đồ uống
            
            .form-group
              label.form-label(for="foodPrice") Giá (VNĐ)
              input.form-control#foodPrice(type="number", required, min="0", placeholder="Nhập giá món ăn")
            
            .form-group
              label.form-label(for="foodImage") Hình ảnh
              input.form-control#foodImage(type="file", accept="image/*")
              small.form-text Hỗ trợ định dạng: JPG, PNG, GIF
        .modal-footer
          button.btn.btn-secondary(type="button", data-dismiss="modal") Hủy
          button.btn.btn-primary(type="submit") Thêm món ăn

    // Edit Food Modal
    .modal#editFoodModal
      .modal-content
        .modal-header
          h3
            i.fas.fa-edit
            |  Sửa món ăn
          button.modal-close &times;
        .modal-body
          form#editFoodForm
            input#editFoodId(type="hidden")
            .form-group
              label.form-label(for="editFoodName") Tên món ăn
              input.form-control#editFoodName(type="text", required)
            
            .form-group
              label.form-label(for="editFoodCategory") Danh mục
              select.form-control#editFoodCategory(required)
                option(value="") Chọn danh mục
                option(value="Món chính") Món chính
                option(value="Đồ ăn nhanh") Đồ ăn nhanh
                option(value="Tráng miệng") Tráng miệng
                option(value="Đồ uống") Đồ uống
            
            .form-group
              label.form-label(for="editFoodPrice") Giá (VNĐ)
              input.form-control#editFoodPrice(type="number", required, min="0")
            
            .form-group
              label.form-label(for="editFoodImage") Hình ảnh mới
              input.form-control#editFoodImage(type="file", accept="image/*")
              small.form-text Để trống nếu không muốn thay đổi hình ảnh
        .modal-footer
          button.btn.btn-secondary(type="button", data-dismiss="modal") Hủy
          button.btn.btn-primary(type="submit") Cập nhật

block scripts
  script.
    document.addEventListener('DOMContentLoaded', function() {
      // Modal functionality
      const modals = document.querySelectorAll('.modal');
      const modalCloses = document.querySelectorAll('.modal-close, [data-dismiss="modal"]');
      
      // Open modal
      document.querySelector('[data-target="#addFoodModal"]').addEventListener('click', function() {
        document.getElementById('addFoodModal').style.display = 'block';
      });
      
      // Close modal
      modalCloses.forEach(close => {
        close.addEventListener('click', function() {
          modals.forEach(modal => modal.style.display = 'none');
        });
      });
      
      // Close modal when clicking outside
      window.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
          e.target.style.display = 'none';
        }
      });
      
      // Add food form
      document.getElementById('addFoodForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = {
          name: document.getElementById('foodName').value,
          category: document.getElementById('foodCategory').value,
          price: parseInt(document.getElementById('foodPrice').value)
        };
        
        // Show loading state
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.textContent;
        submitBtn.textContent = 'Đang thêm...';
        submitBtn.disabled = true;
        
        // Simulate API call
        setTimeout(() => {
          showNotification('Đã thêm món ăn thành công!', 'success');
          document.getElementById('addFoodModal').style.display = 'none';
          this.reset();
          submitBtn.textContent = originalText;
          submitBtn.disabled = false;
          
          // In a real app, you would refresh the table or add the new row
          location.reload();
        }, 1000);
      });
      
      // Edit food buttons
      document.querySelectorAll('.edit-food').forEach(button => {
        button.addEventListener('click', function() {
          const foodId = this.dataset.foodId;
          const foodName = this.dataset.foodName;
          const foodCategory = this.dataset.foodCategory;
          const foodPrice = this.dataset.foodPrice;
          
          // Populate edit form
          document.getElementById('editFoodId').value = foodId;
          document.getElementById('editFoodName').value = foodName;
          document.getElementById('editFoodCategory').value = foodCategory;
          document.getElementById('editFoodPrice').value = foodPrice;
          
          // Show edit modal
          document.getElementById('editFoodModal').style.display = 'block';
        });
      });
      
      // Edit food form
      document.getElementById('editFoodForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = {
          id: document.getElementById('editFoodId').value,
          name: document.getElementById('editFoodName').value,
          category: document.getElementById('editFoodCategory').value,
          price: parseInt(document.getElementById('editFoodPrice').value)
        };
        
        // Show loading state
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.textContent;
        submitBtn.textContent = 'Đang cập nhật...';
        submitBtn.disabled = true;
        
        // Simulate API call
        setTimeout(() => {
          showNotification('Đã cập nhật món ăn thành công!', 'success');
          document.getElementById('editFoodModal').style.display = 'none';
          submitBtn.textContent = originalText;
          submitBtn.disabled = false;
          
          // In a real app, you would update the table row
          location.reload();
        }, 1000);
      });
      
      // Delete food buttons
      document.querySelectorAll('.delete-food').forEach(button => {
        button.addEventListener('click', function() {
          const foodId = this.dataset.foodId;
          const foodName = this.dataset.foodName;
          
          if (confirm(`Bạn có chắc muốn xóa món "${foodName}"?`)) {
            // Show loading state
            const originalText = this.innerHTML;
            this.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            this.disabled = true;
            
            // Simulate API call
            setTimeout(() => {
              showNotification(`Đã xóa món "${foodName}" thành công!`, 'success');
              
              // Remove row with animation
              const row = this.closest('tr');
              row.style.opacity = '0';
              row.style.transform = 'translateX(-100%)';
              setTimeout(() => {
                row.remove();
              }, 300);
            }, 1000);
          }
        });
      });
    });
    
    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `notification notification-${type}`;
      notification.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : 'info-circle'}"></i>
        <span>${message}</span>
        <button onclick="this.parentElement.remove()">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Add notification styles if not exists
      if (!document.querySelector('#notification-styles')) {
        const style = document.createElement('style');
        style.id = 'notification-styles';
        style.textContent = `
          .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            z-index: 1000;
            animation: slideIn 0.3s ease-out;
          }
          .notification-success {
            border-left: 4px solid #28a745;
            color: #155724;
          }
          .notification button {
            background: none;
            border: none;
            cursor: pointer;
            opacity: 0.7;
            margin-left: 0.5rem;
          }
          .notification button:hover {
            opacity: 1;
          }
          @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
          }
        `;
        document.head.appendChild(style);
      }
      
      document.body.appendChild(notification);
      
      // Auto remove after 3 seconds
      setTimeout(() => {
        if (notification.parentElement) {
          notification.remove();
        }
      }, 3000);
    }
